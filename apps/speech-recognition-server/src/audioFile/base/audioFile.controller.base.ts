/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AudioFileService } from "../audioFile.service";
import { AudioFileCreateInput } from "./AudioFileCreateInput";
import { AudioFile } from "./AudioFile";
import { AudioFileFindManyArgs } from "./AudioFileFindManyArgs";
import { AudioFileWhereUniqueInput } from "./AudioFileWhereUniqueInput";
import { AudioFileUpdateInput } from "./AudioFileUpdateInput";

export class AudioFileControllerBase {
  constructor(protected readonly service: AudioFileService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AudioFile })
  async createAudioFile(
    @common.Body() data: AudioFileCreateInput
  ): Promise<AudioFile> {
    return await this.service.createAudioFile({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        fileName: true,
        filePath: true,
        uploadedAt: true,
        status: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AudioFile] })
  @ApiNestedQuery(AudioFileFindManyArgs)
  async audioFiles(@common.Req() request: Request): Promise<AudioFile[]> {
    const args = plainToClass(AudioFileFindManyArgs, request.query);
    return this.service.audioFiles({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        fileName: true,
        filePath: true,
        uploadedAt: true,
        status: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AudioFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async audioFile(
    @common.Param() params: AudioFileWhereUniqueInput
  ): Promise<AudioFile | null> {
    const result = await this.service.audioFile({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        fileName: true,
        filePath: true,
        uploadedAt: true,
        status: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AudioFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAudioFile(
    @common.Param() params: AudioFileWhereUniqueInput,
    @common.Body() data: AudioFileUpdateInput
  ): Promise<AudioFile | null> {
    try {
      return await this.service.updateAudioFile({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          fileName: true,
          filePath: true,
          uploadedAt: true,
          status: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AudioFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAudioFile(
    @common.Param() params: AudioFileWhereUniqueInput
  ): Promise<AudioFile | null> {
    try {
      return await this.service.deleteAudioFile({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          fileName: true,
          filePath: true,
          uploadedAt: true,
          status: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/status/:id")
  @swagger.ApiOkResponse({
    type: AudioFile,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetAudioFileStatus(
    @common.Body()
    body: AudioFileCreateInput
  ): Promise<AudioFile> {
    return this.service.GetAudioFileStatus(body);
  }

  @common.Get("/status/:id")
  @swagger.ApiOkResponse({
    type: AudioFile,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetAudioFileStatus(
    @common.Body()
    body: AudioFileCreateInput
  ): Promise<AudioFile> {
    return this.service.GetAudioFileStatus(body);
  }

  @common.Get("/status/:id")
  @swagger.ApiOkResponse({
    type: AudioFile,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetAudioFileStatusCorrected(
    @common.Body()
    body: AudioFileCreateInput
  ): Promise<AudioFile> {
    return this.service.GetAudioFileStatusCorrected(body);
  }

  @common.Post("/upload")
  @swagger.ApiOkResponse({
    type: AudioFile,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async UploadAudioFile(
    @common.Body()
    body: AudioFileCreateInput
  ): Promise<AudioFile> {
    return this.service.UploadAudioFile(body);
  }
}
